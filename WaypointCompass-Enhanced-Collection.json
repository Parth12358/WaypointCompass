{
  "info": {
    "name": "WaypointCompass API - Enhanced",
    "description": "Complete API collection for WaypointCompass - ESP32 Navigation System with TTS (with proper tests)",
    "version": "1.1.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://waypointcompass-production.up.railway.app",
      "type": "string"
    },
    {
      "key": "deviceId",
      "value": "DEMO_ESP32_001",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîç System Health",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has status field', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson.status).to.eql('healthy');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check if the server is running and healthy"
          }
        },
        {
          "name": "API Overview",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has endpoints', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('endpoints');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            },
            "description": "Get all available API endpoints"
          }
        }
      ]
    },
    {
      "name": "üìç GPS Tracking",
      "item": [
        {
          "name": "Submit GPS Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Response indicates success', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains GPS data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('latitude');",
                  "    pm.expect(responseJson.data).to.have.property('longitude');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"latitude\": 40.7128,\n  \"longitude\": -74.0060,\n  \"altitude\": 10,\n  \"accuracy\": 5,\n  \"deviceId\": \"{{deviceId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/gps",
              "host": ["{{baseUrl}}"],
              "path": ["api", "gps"]
            },
            "description": "Submit current GPS coordinates from ESP32"
          }
        },
        {
          "name": "Submit GPS - Central Park",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('GPS update successful', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.include('GPS location updated');",
                  "});",
                  "",
                  "pm.test('Central Park coordinates accepted', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.latitude).to.equal(40.7794);",
                  "    pm.expect(responseJson.data.longitude).to.equal(-73.9632);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"latitude\": 40.7794,\n  \"longitude\": -73.9632,\n  \"altitude\": 15,\n  \"accuracy\": 3,\n  \"deviceId\": \"{{deviceId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/gps",
              "host": ["{{baseUrl}}"],
              "path": ["api", "gps"]
            },
            "description": "Demo GPS update - Central Park location"
          }
        }
      ]
    },
    {
      "name": "üìå Location Management",
      "item": [
        {
          "name": "Get All Locations",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has locations data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/locations",
              "host": ["{{baseUrl}}"],
              "path": ["api", "locations"]
            },
            "description": "Retrieve all saved locations"
          }
        },
        {
          "name": "Save New Location",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Location saved successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.include('saved successfully');",
                  "});",
                  "",
                  "pm.test('Location data returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('name');",
                  "    pm.expect(responseJson.data.name).to.equal('Coffee Shop');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Coffee Shop\",\n  \"latitude\": 40.7589,\n  \"longitude\": -73.9851,\n  \"type\": \"destination\",\n  \"deviceId\": \"{{deviceId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/locations",
              "host": ["{{baseUrl}}"],
              "path": ["api", "locations"]
            },
            "description": "Save a new destination location"
          }
        },
        {
          "name": "Start Sidequest",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('Sidequest response received', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentLat\": 40.7128,\n  \"currentLng\": -74.0060,\n  \"deviceId\": \"{{deviceId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/sidequest/start",
              "host": ["{{baseUrl}}"],
              "path": ["api", "sidequest", "start"]
            },
            "description": "Find random nearby location for exploration"
          }
        }
      ]
    },
    {
      "name": "üõ°Ô∏è Safety System",
      "item": [
        {
          "name": "Analyze Route Safety",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Safety analysis response received', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/safety/analyze-route?fromLat=40.7128&fromLng=-74.0060&toLat=40.7589&toLng=-73.9851",
              "host": ["{{baseUrl}}"],
              "path": ["api", "safety", "analyze-route"],
              "query": [
                {
                  "key": "fromLat",
                  "value": "40.7128"
                },
                {
                  "key": "fromLng",
                  "value": "-74.0060"
                },
                {
                  "key": "toLat",
                  "value": "40.7589"
                },
                {
                  "key": "toLng",
                  "value": "-73.9851"
                }
              ]
            },
            "description": "Analyze safety along navigation route"
          }
        },
        {
          "name": "Find Emergency Services",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Emergency services response received', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/safety/emergency-services?lat=40.7128&lng=-74.0060&radius=1000",
              "host": ["{{baseUrl}}"],
              "path": ["api", "safety", "emergency-services"],
              "query": [
                {
                  "key": "lat",
                  "value": "40.7128"
                },
                {
                  "key": "lng",
                  "value": "-74.0060"
                },
                {
                  "key": "radius",
                  "value": "1000"
                }
              ]
            },
            "description": "Find nearby emergency services (hospitals, police)"
          }
        }
      ]
    },
    {
      "name": "üîä Text-to-Speech System",
      "item": [
        {
          "name": "TTS Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('TTS status received', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/tts/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tts", "status"]
            },
            "description": "Check TTS service status"
          }
        },
        {
          "name": "Speak Custom Text",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 201', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test('TTS request processed', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Welcome to WaypointCompass! Your navigation system is ready.\",\n  \"deviceId\": \"{{deviceId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tts/speak",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tts", "speak"]
            },
            "description": "Convert text to speech and announce"
          }
        }
      ]
    },
    {
      "name": "üéØ Hackathon Demo Flow",
      "description": "Perfect sequence for live demonstrations",
      "item": [
        {
          "name": "1. System Health Check ‚úÖ",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('‚úÖ System is healthy and ready', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.eql('healthy');",
                  "});",
                  "",
                  "console.log('üü¢ WaypointCompass system is LIVE and healthy!');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Verify system is running"
          }
        },
        {
          "name": "2. GPS Location Update üìç",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('üìç GPS location updated successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});",
                  "",
                  "console.log('üü¢ ESP32 GPS coordinates received and processed!');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"latitude\": 40.7128,\n  \"longitude\": -74.0060,\n  \"altitude\": 10,\n  \"accuracy\": 5,\n  \"deviceId\": \"{{deviceId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/gps",
              "host": ["{{baseUrl}}"],
              "path": ["api", "gps"]
            },
            "description": "Simulate ESP32 sending current location"
          }
        },
        {
          "name": "3. Save Destination üéØ",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('üéØ Destination saved successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.include('saved successfully');",
                  "});",
                  "",
                  "console.log('üü¢ Hackathon Venue location saved to database!');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Hackathon Venue\",\n  \"latitude\": 40.7589,\n  \"longitude\": -73.9851,\n  \"type\": \"destination\",\n  \"deviceId\": \"{{deviceId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/locations",
              "host": ["{{baseUrl}}"],
              "path": ["api", "locations"]
            },
            "description": "Save target destination"
          }
        },
        {
          "name": "4. Start Navigation Audio üîä",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('üîä Navigation audio started', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success');",
                  "});",
                  "",
                  "console.log('üü¢ TTS navigation guidance activated!');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"targetName\": \"Hackathon Venue\",\n  \"targetLat\": 40.7589,\n  \"targetLng\": -73.9851,\n  \"deviceId\": \"{{deviceId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tts/navigation/start",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tts", "navigation", "start"]
            },
            "description": "Begin audio navigation guidance"
          }
        },
        {
          "name": "5. Arrival Announcement üéâ",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('üéâ Arrival announcement sent', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success');",
                  "});",
                  "",
                  "console.log('üü¢ SUCCESS! Complete WaypointCompass demo executed!');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Congratulations! You have arrived at the Hackathon Venue. Good luck with your presentation!\",\n  \"deviceId\": \"{{deviceId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tts/speak",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tts", "speak"]
            },
            "description": "Announce successful arrival"
          }
        }
      ]
    }
  ]
}