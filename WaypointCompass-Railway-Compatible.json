{
  "info": {
    "name": "WaypointCompass API - Railway Compatible",
    "description": "Production-ready API collection for WaypointCompass - Works with Railway deployment limitations",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://waypointcompass-production.up.railway.app",
      "type": "string"
    },
    {
      "key": "deviceId",
      "value": "DEMO_ESP32_{{$timestamp}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîç System Health",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('‚úÖ System is healthy and ready', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.eql('healthy');",
                  "});",
                  "",
                  "console.log('üü¢ WaypointCompass system is LIVE and healthy!');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check if the server is running and healthy"
          }
        },
        {
          "name": "API Overview",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('API endpoints listed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('endpoints');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            },
            "description": "Get all available API endpoints"
          }
        }
      ]
    },
    {
      "name": "üìç GPS Tracking",
      "item": [
        {
          "name": "Submit GPS Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('üìç GPS location updated successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});",
                  "",
                  "console.log('üü¢ ESP32 GPS coordinates received and processed!');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"latitude\": 40.7128,\n  \"longitude\": -74.0060,\n  \"altitude\": 10,\n  \"accuracy\": 5,\n  \"deviceId\": \"{{deviceId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/gps",
              "host": ["{{baseUrl}}"],
              "path": ["api", "gps"]
            },
            "description": "Submit current GPS coordinates from ESP32"
          }
        },
        {
          "name": "Submit GPS - Central Park",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('GPS coordinates updated', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"latitude\": 40.7794,\n  \"longitude\": -73.9632,\n  \"altitude\": 15,\n  \"accuracy\": 3,\n  \"deviceId\": \"{{deviceId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/gps",
              "host": ["{{baseUrl}}"],
              "path": ["api", "gps"]
            },
            "description": "Demo GPS update - Central Park location"
          }
        }
      ]
    },
    {
      "name": "üìå Location Management",
      "item": [
        {
          "name": "Get All Locations",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('üìå Locations retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});",
                  "",
                  "console.log('üü¢ Location database accessed successfully!');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/locations",
              "host": ["{{baseUrl}}"],
              "path": ["api", "locations"]
            },
            "description": "Retrieve all saved locations"
          }
        },
        {
          "name": "Save New Location",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('üéØ Destination saved successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});",
                  "",
                  "console.log('üü¢ New destination location saved to database!');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Coffee Shop {{$timestamp}}\",\n  \"latitude\": 40.7589,\n  \"longitude\": -73.9851,\n  \"type\": \"destination\",\n  \"deviceId\": \"{{deviceId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/locations",
              "host": ["{{baseUrl}}"],
              "path": ["api", "locations"]
            },
            "description": "Save a new destination location"
          }
        }
      ]
    },
    {
      "name": "üõ°Ô∏è Safety System",
      "item": [
        {
          "name": "Analyze Route Safety",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('üõ°Ô∏è Safety analysis completed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});",
                  "",
                  "console.log('üü¢ Route safety analysis performed!');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/safety/analyze-route?fromLat=40.7128&fromLng=-74.0060&toLat=40.7589&toLng=-73.9851",
              "host": ["{{baseUrl}}"],
              "path": ["api", "safety", "analyze-route"],
              "query": [
                {
                  "key": "fromLat",
                  "value": "40.7128"
                },
                {
                  "key": "fromLng",
                  "value": "-74.0060"
                },
                {
                  "key": "toLat",
                  "value": "40.7589"
                },
                {
                  "key": "toLng",
                  "value": "-73.9851"
                }
              ]
            },
            "description": "Analyze safety along navigation route"
          }
        }
      ]
    },
    {
      "name": "üîä TTS System (Railway Limited)",
      "description": "TTS endpoints with Railway deployment limitations",
      "item": [
        {
          "name": "TTS Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('üîä TTS service status retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});",
                  "",
                  "console.log('üü¢ TTS service is available (status only on Railway)!');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/tts/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tts", "status"]
            },
            "description": "Check TTS service status"
          }
        }
      ]
    },
    {
      "name": "üéØ Hackathon Demo Flow (Railway Compatible)",
      "description": "Perfect sequence for live demonstrations - works on Railway",
      "item": [
        {
          "name": "1. System Health Check ‚úÖ",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('‚úÖ System is healthy and ready', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.eql('healthy');",
                  "});",
                  "",
                  "console.log('üü¢ WaypointCompass system is LIVE on Railway!');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Verify system is running"
          }
        },
        {
          "name": "2. GPS Location Update üìç",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('üìç GPS location updated successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});",
                  "",
                  "console.log('üü¢ ESP32 GPS coordinates received and processed!');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"latitude\": 40.7128,\n  \"longitude\": -74.0060,\n  \"altitude\": 10,\n  \"accuracy\": 5,\n  \"deviceId\": \"{{deviceId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/gps",
              "host": ["{{baseUrl}}"],
              "path": ["api", "gps"]
            },
            "description": "Simulate ESP32 sending current location"
          }
        },
        {
          "name": "3. Save Destination üéØ",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('üéØ Destination saved successfully', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});",
                  "",
                  "console.log('üü¢ Hackathon Venue saved to MongoDB database!');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Hackathon Venue {{$timestamp}}\",\n  \"latitude\": 40.7589,\n  \"longitude\": -73.9851,\n  \"type\": \"destination\",\n  \"deviceId\": \"{{deviceId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/locations",
              "host": ["{{baseUrl}}"],
              "path": ["api", "locations"]
            },
            "description": "Save target destination"
          }
        },
        {
          "name": "4. Route Safety Analysis üõ°Ô∏è",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('üõ°Ô∏è Safety analysis completed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});",
                  "",
                  "console.log('üü¢ Route safety analysis performed!');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/safety/analyze-route?fromLat=40.7128&fromLng=-74.0060&toLat=40.7589&toLng=-73.9851",
              "host": ["{{baseUrl}}"],
              "path": ["api", "safety", "analyze-route"],
              "query": [
                {
                  "key": "fromLat",
                  "value": "40.7128"
                },
                {
                  "key": "fromLng",
                  "value": "-74.0060"
                },
                {
                  "key": "toLat",
                  "value": "40.7589"
                },
                {
                  "key": "toLng",
                  "value": "-73.9851"
                }
              ]
            },
            "description": "Analyze route safety"
          }
        },
        {
          "name": "5. Verify All Locations üìã",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('üìã Location database verified', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});",
                  "",
                  "console.log('üü¢ SUCCESS! Complete WaypointCompass demo executed!');",
                  "console.log('üéâ All core features demonstrated successfully!');",
                  "console.log('‚ú® TTS works locally - Railway has system limitations');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/locations",
              "host": ["{{baseUrl}}"],
              "path": ["api", "locations"]
            },
            "description": "Verify all saved locations"
          }
        }
      ]
    }
  ]
}